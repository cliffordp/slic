# docker-compose configuration file used to scaffold the WordPress installation.

version: "3"

networks:
  tric:
    ipam:
      driver: default
      config:
        - subnet: "172.${TRIC_TEST_SUBNET:-28}.0.0/16"

volumes:
  function-mocker-cache:

services:

  db:
    image: mariadb
    networks:
      - tric
    environment:
      MYSQL_DATABASE: test
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}

  wordpress:
    image: tric/wordpress
    build:
      context: containers/wordpress
      # By default, build the version of Docker that does not include XDebug.
      dockerfile: ${TRIC_WORDPRESS_DOCKERFILE:-Dockerfile.debug}
      args:
        # Fix the version of the WordPress image to avoid issues w/ out-of-date database dumps.
        WORDPRESS_IMAGE_VERSION: 5.5-apache
        # Allow the image to be built creating the user and group ID for the host machine user.
        DOCKER_RUN_UID: ${DOCKER_RUN_UID:-0}
        DOCKER_RUN_GID: ${DOCKER_RUN_GID:-0}
    networks:
      tric:
        # Allow the other containers to read this container with a pretty URL.
        ipv4_address: 172.${TRIC_TEST_SUBNET:-28}.1.1
    extra_hosts:
      # Let's make sure the WordPress service can reach itself with a pretty URL for internal requests.
      - "wordpress.test:172.${TRIC_TEST_SUBNET:-28}.1.1"
    depends_on:
      - db
      - redis
    # Run the container as the host user and group.
    # Apache will run as the same user and permission issues with WordPress generated files should not arise.
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    sysctls:
      # Allow any user to bind ports <= 1024.
      # This is required as we're running the container as the host user and that user might not be in the root
      # wheel in the container.
      net.ipv4.ip_unprivileged_port_start: 0
    ports:
      # Allow reaching the site at `http://localhost:8888`.
      # The port, in the container, is not the default `80` to allow non root users to bind (listen) to it.
      - "${WORDPRESS_HTTP_PORT:-8888}:80"
    environment:
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: password
      # This db is created by the db container at startup, no need to create it.
      WORDPRESS_DB_NAME: test
      WORDPRESS_DB_HOST: db
      WORDPRESS_DEBUG: 1
      # Pull plugins from the `/plugins` directory to allow debugging the files we're working on.
      WORDPRESS_CONFIG_EXTRA: |
        $$scheme = empty( $$_SERVER['HTTPS'] ) ? 'http' : 'https';
        $$url    = isset( $$_SERVER['HTTP_HOST'] ) ? $$_SERVER['HTTP_HOST'] : 'wordpress.test';
        define( 'WP_HOME', $$scheme . '://' . $$url );
        define( 'WP_SITEURL', $$scheme . '://' . $$url );
        define( 'WP_REDIS_HOST', 'redis' );
        define( 'WP_REDIS_PORT', 6379 );
        define( 'TRIBE_NO_FREEMIUS', true );
        define( 'WP_DEBUG_DISPLAY', true );
        define( 'WP_DEBUG_LOG', true );
      # Configure this to debug the tests with XDebug.
      # Map the `_wordpress` directory to `/var/www/html' directory in your IDE of choice.
      # Map the `_plugins` directory to `/plugins` directory in your IDE of choice.
      PHP_IDE_CONFIG: "serverName=${XDK:-tric}"
      # The `remote_host` is set to `host.docker.internal` that will resolve to the host machine IP address, from
      # within the container, on macOS and Windows.
      # On Linux set the host machine IP address before calling the stack:
      # XDH=$(ip route | grep docker0 | awk '{print $9}') docker-compose ...
      XDEBUG_CONFIG: "idekey=${XDK:-tric} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Whether to disable the XDebug extension in the Codeception container completely or not.
      XDEBUG_DISABLE: "${XDEBUG_DISABLE:-0}"
    volumes:
      # Paths are relative to the directory that contains this file, NOT the current working directory.
      # Share the WordPress core installation files in the `_wordpress` directory.
      - ${TRIC_WP_DIR}:/var/www/html:cached
